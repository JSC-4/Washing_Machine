

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sun Oct 07 07:51:39 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.00
    21                           ; Generated 27/05/2018 GMT
    22                           ; 
    23                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F877A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000D                     	;# 
   128  000E                     	;# 
   129  000E                     	;# 
   130  000F                     	;# 
   131  0010                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001D                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0087                     	;# 
   153  0088                     	;# 
   154  0089                     	;# 
   155  008C                     	;# 
   156  008D                     	;# 
   157  008E                     	;# 
   158  0091                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009C                     	;# 
   165  009D                     	;# 
   166  009E                     	;# 
   167  009F                     	;# 
   168  010C                     	;# 
   169  010D                     	;# 
   170  010E                     	;# 
   171  010F                     	;# 
   172  018C                     	;# 
   173  018D                     	;# 
   174  0009                     _PORTEbits	set	9
   175  0043                     _RD3	set	67
   176  0042                     _RD2	set	66
   177  0047                     _RD7	set	71
   178  0046                     _RD6	set	70
   179  0045                     _RD5	set	69
   180  0044                     _RD4	set	68
   181  009F                     _ADCON1	set	159
   182  0089                     _TRISE	set	137
   183  0088                     _TRISD	set	136
   184                           
   185                           	psect	strings
   186  0003                     __pstrings:	
   187  0003                     stringtab:	
   188  0003                     __stringtab:	
   189  0003                     stringcode:	
   190                           ;	String table - string pointers are 1 byte each
   191                           
   192  0003                     stringdir:	
   193  0003  3000               	movlw	high stringdir
   194  0004  008A               	movwf	10
   195  0005  0804               	movf	4,w
   196  0006  0A84               	incf	4,f
   197  0007  0782               	addwf	2,f
   198  0008                     __stringbase:	
   199  0008  3400               	retlw	0
   200  0009                     __end_of__stringtab:	
   201  0009                     STR_7:	
   202  0009  344D               	retlw	77	;'M'
   203  000A  3465               	retlw	101	;'e'
   204  000B  3464               	retlw	100	;'d'
   205  000C  3469               	retlw	105	;'i'
   206  000D  3475               	retlw	117	;'u'
   207  000E  346D               	retlw	109	;'m'
   208  000F  3420               	retlw	32	;' '
   209  0010  3457               	retlw	87	;'W'
   210  0011  3461               	retlw	97	;'a'
   211  0012  3473               	retlw	115	;'s'
   212  0013  3468               	retlw	104	;'h'
   213  0014  3400               	retlw	0
   214  0015                     STR_1:	
   215  0015  3453               	retlw	83	;'S'
   216  0016  3465               	retlw	101	;'e'
   217  0017  346C               	retlw	108	;'l'
   218  0018  3465               	retlw	101	;'e'
   219  0019  3463               	retlw	99	;'c'
   220  001A  3474               	retlw	116	;'t'
   221  001B  3420               	retlw	32	;' '
   222  001C  3479               	retlw	121	;'y'
   223  001D  346F               	retlw	111	;'o'
   224  001E  3475               	retlw	117	;'u'
   225  001F  3472               	retlw	114	;'r'
   226  0020  3400               	retlw	0
   227  0021                     STR_3:	
   228  0021  3451               	retlw	81	;'Q'
   229  0022  3475               	retlw	117	;'u'
   230  0023  3469               	retlw	105	;'i'
   231  0024  3463               	retlw	99	;'c'
   232  0025  346B               	retlw	107	;'k'
   233  0026  3420               	retlw	32	;' '
   234  0027  3457               	retlw	87	;'W'
   235  0028  3461               	retlw	97	;'a'
   236  0029  3473               	retlw	115	;'s'
   237  002A  3468               	retlw	104	;'h'
   238  002B  3400               	retlw	0
   239  002C                     STR_5:	
   240  002C  3446               	retlw	70	;'F'
   241  002D  3461               	retlw	97	;'a'
   242  002E  3473               	retlw	115	;'s'
   243  002F  3474               	retlw	116	;'t'
   244  0030  3420               	retlw	32	;' '
   245  0031  3457               	retlw	87	;'W'
   246  0032  3461               	retlw	97	;'a'
   247  0033  3473               	retlw	115	;'s'
   248  0034  3468               	retlw	104	;'h'
   249  0035  3400               	retlw	0
   250  0036                     STR_9:	
   251  0036  3453               	retlw	83	;'S'
   252  0037  346C               	retlw	108	;'l'
   253  0038  346F               	retlw	111	;'o'
   254  0039  3477               	retlw	119	;'w'
   255  003A  3420               	retlw	32	;' '
   256  003B  3457               	retlw	87	;'W'
   257  003C  3461               	retlw	97	;'a'
   258  003D  3473               	retlw	115	;'s'
   259  003E  3468               	retlw	104	;'h'
   260  003F  3400               	retlw	0
   261  0040                     STR_2:	
   262  0040  346F               	retlw	111	;'o'
   263  0041  3470               	retlw	112	;'p'
   264  0042  3474               	retlw	116	;'t'
   265  0043  3469               	retlw	105	;'i'
   266  0044  346F               	retlw	111	;'o'
   267  0045  346E               	retlw	110	;'n'
   268  0046  343A               	retlw	58	;':'
   269  0047  3400               	retlw	0
   270  0048                     STR_4:	
   271  0048  344F               	retlw	79	;'O'
   272  0049  344B               	retlw	75	;'K'
   273  004A  343F               	retlw	63	;'?'
   274  004B  3400               	retlw	0
   275  0048                     
   276                           ; #config settings
   277  0000                     
   278                           	psect	cinit
   279  07FC                     start_initialization:	
   280  07FC                     __initialization:	
   281  07FC                     end_of_initialization:	
   282                           ;End of C runtime variable initialization code
   283                           
   284  07FC                     __end_of__initialization:	
   285  07FC  0183               	clrf	3
   286  07FD  120A  118A  2D9E   	ljmp	_main	;jump to C main() function
   287                           
   288                           	psect	cstackCOMMON
   289  0070                     __pcstackCOMMON:	
   290  0070                     ?_Setup:	
   291  0070                     ?_Option:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_Lcd_SetBit:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ??_Lcd_SetBit:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_Lcd_Cmd:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_Lcd_Start:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_Lcd_Print_Char:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?_Lcd_Print_String:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?_main:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?_Lcd_Clear:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     Lcd_SetBit@data_bit:	
   319                           ; 2 bytes @ 0x0
   320                           
   321                           
   322                           ; 1 bytes @ 0x0
   323  0070                     	ds	1
   324  0071                     ??_Lcd_Cmd:	
   325  0071                     ??_Lcd_Print_Char:	
   326                           ; 1 bytes @ 0x1
   327                           
   328                           
   329                           ; 1 bytes @ 0x1
   330  0071                     	ds	1
   331  0072                     Lcd_Print_Char@Lower_Nibble:	
   332                           
   333                           ; 1 bytes @ 0x2
   334  0072                     	ds	1
   335  0073                     Lcd_Cmd@a:	
   336  0073                     Lcd_Print_Char@Upper_Nibble:	
   337                           ; 1 bytes @ 0x3
   338                           
   339                           
   340                           ; 1 bytes @ 0x3
   341  0073                     	ds	1
   342  0074                     ??_Lcd_Clear:	
   343  0074                     ?_Lcd_Set_Cursor:	
   344                           ; 1 bytes @ 0x4
   345                           
   346  0074                     ??_Lcd_Start:	
   347                           ; 1 bytes @ 0x4
   348                           
   349  0074                     Lcd_Set_Cursor@b:	
   350                           ; 1 bytes @ 0x4
   351                           
   352  0074                     Lcd_Print_Char@data:	
   353                           ; 1 bytes @ 0x4
   354                           
   355                           
   356                           ; 1 bytes @ 0x4
   357  0074                     	ds	1
   358  0075                     ??_Lcd_Set_Cursor:	
   359  0075                     Lcd_Print_Char@i:	
   360                           ; 1 bytes @ 0x5
   361                           
   362                           
   363                           ; 2 bytes @ 0x5
   364  0075                     	ds	1
   365  0076                     Lcd_Start@i:	
   366                           
   367                           ; 2 bytes @ 0x6
   368  0076                     	ds	1
   369  0077                     Lcd_Set_Cursor@a:	
   370  0077                     Lcd_Print_Char@i_80:	
   371                           ; 1 bytes @ 0x7
   372                           
   373                           
   374                           ; 2 bytes @ 0x7
   375  0077                     	ds	1
   376  0078                     Lcd_Set_Cursor@z:	
   377                           
   378                           ; 1 bytes @ 0x8
   379  0078                     	ds	1
   380  0079                     ??_Lcd_Print_String:	
   381  0079                     Lcd_Set_Cursor@y:	
   382                           ; 1 bytes @ 0x9
   383                           
   384  0079                     Lcd_Print_String@i:	
   385                           ; 1 bytes @ 0x9
   386                           
   387                           
   388                           ; 2 bytes @ 0x9
   389  0079                     	ds	1
   390  007A                     Lcd_Set_Cursor@temp:	
   391                           
   392                           ; 1 bytes @ 0xA
   393  007A                     	ds	1
   394  007B                     Lcd_Print_String@a:	
   395                           
   396                           ; 1 bytes @ 0xB
   397  007B                     	ds	1
   398  007C                     ??_Setup:	
   399  007C                     ??_Option:	
   400                           ; 1 bytes @ 0xC
   401                           
   402                           
   403                           ; 1 bytes @ 0xC
   404  007C                     	ds	2
   405  007E                     ??_main:	
   406                           
   407                           	psect	cstackBANK0
   408  0020                     __pcstackBANK0:	
   409                           ; 1 bytes @ 0xE
   410                           
   411  0020                     Option@oC:	
   412                           
   413                           ; 1 bytes @ 0x0
   414  0020                     	ds	1
   415                           
   416                           	psect	maintext
   417  059E                     __pmaintext:	
   418 ;;
   419 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   420 ;;
   421 ;; *************** function _main *****************
   422 ;; Defined at:
   423 ;;		line 31 in file "Washing_Machine.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;		None
   426 ;; Auto vars:     Size  Location     Type
   427 ;;  a               2    0        unsigned int 
   428 ;; Return value:  Size  Location     Type
   429 ;;                  1    wreg      void 
   430 ;; Registers used:
   431 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   432 ;; Tracked objects:
   433 ;;		On entry : B00/0
   434 ;;		On exit  : 0/0
   435 ;;		Unchanged: 0/0
   436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   437 ;;      Params:         0       0       0       0       0
   438 ;;      Locals:         0       0       0       0       0
   439 ;;      Temps:          0       0       0       0       0
   440 ;;      Totals:         0       0       0       0       0
   441 ;;Total ram usage:        0 bytes
   442 ;; Hardware stack levels required when called:    4
   443 ;; This function calls:
   444 ;;		_Lcd_Start
   445 ;;		_Option
   446 ;;		_Setup
   447 ;; This function is called by:
   448 ;;		Startup code after reset
   449 ;; This function uses a non-reentrant model
   450 ;;
   451                           
   452                           
   453                           ;psect for function _main
   454  059E                     _main:	
   455                           
   456                           ;Washing_Machine.c: 33:         Lcd_Print_String("option:");;Washing_Machine.c: 35: 
   457                           
   458                           ;incstack = 0
   459                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   460  059E  1683               	bsf	3,5	;RP0=1, select bank1
   461  059F  1303               	bcf	3,6	;RP1=0, select bank1
   462  05A0  0188               	clrf	8	;volatile
   463                           
   464                           ;Washing_Machine.c: 36: void Option()
   465  05A1  3007               	movlw	7
   466  05A2  0089               	movwf	9	;volatile
   467                           
   468                           ;Washing_Machine.c: 38:     uint8_t oC;
   469  05A3  30F7               	movlw	247
   470  05A4  009F               	movwf	31	;volatile
   471                           
   472                           ;Washing_Machine.c: 40:     if (PORTEbits.RE2 == 0)
   473  05A5  120A  118A  26E6  120A  118A  	fcall	_Lcd_Start
   474                           
   475                           ;Washing_Machine.c: 41:         oC++;
   476  05AA  120A  118A  25E9  120A  118A  	fcall	_Setup
   477                           
   478                           ;Washing_Machine.c: 42:     else if (oC == 4)
   479  05AF  120A  118A  275A  120A  118A  	fcall	_Option
   480  05B4                     l74:	
   481                           ;Washing_Machine.c: 43:         oC == 0;
   482                           
   483                           
   484                           ;Washing_Machine.c: 44: ;Washing_Machine.c: 46:     {
   485  05B4  2DB4               	goto	l74
   486  05B5                     __end_of_main:	
   487                           
   488                           	psect	text1
   489  05E9                     __ptext1:	
   490 ;; *************** function _Setup *****************
   491 ;; Defined at:
   492 ;;		line 49 in file "Washing_Machine.c"
   493 ;; Parameters:    Size  Location     Type
   494 ;;		None
   495 ;; Auto vars:     Size  Location     Type
   496 ;;		None
   497 ;; Return value:  Size  Location     Type
   498 ;;                  1    wreg      void 
   499 ;; Registers used:
   500 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   501 ;; Tracked objects:
   502 ;;		On entry : 0/0
   503 ;;		On exit  : 0/0
   504 ;;		Unchanged: 0/0
   505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   506 ;;      Params:         0       0       0       0       0
   507 ;;      Locals:         0       0       0       0       0
   508 ;;      Temps:          0       0       0       0       0
   509 ;;      Totals:         0       0       0       0       0
   510 ;;Total ram usage:        0 bytes
   511 ;; Hardware stack levels used:    1
   512 ;; Hardware stack levels required when called:    3
   513 ;; This function calls:
   514 ;;		_Lcd_Clear
   515 ;;		_Lcd_Print_String
   516 ;;		_Lcd_Set_Cursor
   517 ;; This function is called by:
   518 ;;		_main
   519 ;; This function uses a non-reentrant model
   520 ;;
   521                           
   522                           
   523                           ;psect for function _Setup
   524  05E9                     _Setup:	
   525                           
   526                           ;Washing_Machine.c: 51:             Lcd_Set_Cursor(2,1);
   527                           
   528                           ;incstack = 0
   529                           ; Regs used in _Setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   530  05E9  120A  118A  2593  120A  118A  	fcall	_Lcd_Clear
   531                           
   532                           ;Washing_Machine.c: 52:             Lcd_Print_String("OK?");
   533  05EE  01F4               	clrf	Lcd_Set_Cursor@b
   534  05EF  0AF4               	incf	Lcd_Set_Cursor@b,f
   535  05F0  3001               	movlw	1
   536  05F1  120A  118A  262B  120A  118A  	fcall	_Lcd_Set_Cursor
   537                           
   538                           ;Washing_Machine.c: 53:             break;
   539  05F6  300D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   540  05F7  120A  118A  2609  120A  118A  	fcall	_Lcd_Print_String
   541                           
   542                           ;Washing_Machine.c: 54:         case 1:
   543  05FC  01F4               	clrf	Lcd_Set_Cursor@b
   544  05FD  0AF4               	incf	Lcd_Set_Cursor@b,f
   545  05FE  3002               	movlw	2
   546  05FF  120A  118A  262B  120A  118A  	fcall	_Lcd_Set_Cursor
   547                           
   548                           ;Washing_Machine.c: 55:             Lcd_Clear();
   549  0604  3038               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   550  0605  120A  118A  2609   	fcall	_Lcd_Print_String
   551  0608  0008               	return
   552  0609                     __end_of_Setup:	
   553                           
   554                           	psect	text2
   555  075A                     __ptext2:	
   556 ;; *************** function _Option *****************
   557 ;; Defined at:
   558 ;;		line 58 in file "Washing_Machine.c"
   559 ;; Parameters:    Size  Location     Type
   560 ;;		None
   561 ;; Auto vars:     Size  Location     Type
   562 ;;  oC              1    0[BANK0 ] unsigned char 
   563 ;; Return value:  Size  Location     Type
   564 ;;                  1    wreg      void 
   565 ;; Registers used:
   566 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   567 ;; Tracked objects:
   568 ;;		On entry : 0/0
   569 ;;		On exit  : 0/0
   570 ;;		Unchanged: 0/0
   571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   572 ;;      Params:         0       0       0       0       0
   573 ;;      Locals:         0       1       0       0       0
   574 ;;      Temps:          2       0       0       0       0
   575 ;;      Totals:         2       1       0       0       0
   576 ;;Total ram usage:        3 bytes
   577 ;; Hardware stack levels used:    1
   578 ;; Hardware stack levels required when called:    3
   579 ;; This function calls:
   580 ;;		_Lcd_Clear
   581 ;;		_Lcd_Print_String
   582 ;;		_Lcd_Set_Cursor
   583 ;; This function is called by:
   584 ;;		_main
   585 ;; This function uses a non-reentrant model
   586 ;;
   587                           
   588                           
   589                           ;psect for function _Option
   590  075A                     _Option:	
   591                           
   592                           ;Washing_Machine.c: 60:             break;;Washing_Machine.c: 62:             Lcd_Clear(
      +                          );
   593                           
   594                           ;incstack = 0
   595                           ; Regs used in _Option: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   596  075A  1283               	bcf	3,5	;RP0=0, select bank0
   597  075B  1303               	bcf	3,6	;RP1=0, select bank0
   598  075C  1909               	btfsc	9,2	;volatile
   599  075D  2FE3               	goto	l1011
   600                           
   601                           ;Washing_Machine.c: 63:             Lcd_Set_Cursor(1,1);
   602  075E  3001               	movlw	1
   603  075F  00FC               	movwf	??_Option
   604  0760  087C               	movf	??_Option,w
   605  0761  07A0               	addwf	Option@oC,f
   606                           
   607                           ;Washing_Machine.c: 67:             break;
   608                           
   609                           ;Washing_Machine.c: 64:             Lcd_Print_String("Medium Wash");
   610  0762  2FE3               	goto	l1011
   611  0763                     l985:	
   612                           ;Washing_Machine.c: 68:         case 3:;Washing_Machine.c: 69:             Lcd_Clear();
   613                           
   614                           
   615                           ;Washing_Machine.c: 70:             Lcd_Set_Cursor(1,1);
   616  0763  120A  118A  2593  120A  118A  	fcall	_Lcd_Clear
   617                           
   618                           ;Washing_Machine.c: 71:             Lcd_Print_String("Slow Wash");
   619  0768  01F4               	clrf	Lcd_Set_Cursor@b
   620  0769  0AF4               	incf	Lcd_Set_Cursor@b,f
   621  076A  3001               	movlw	1
   622  076B  120A  118A  262B  120A  118A  	fcall	_Lcd_Set_Cursor
   623                           
   624                           ;Washing_Machine.c: 72:             Lcd_Set_Cursor(2,1);
   625  0770  3019               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   626  0771  120A  118A  2609  120A  118A  	fcall	_Lcd_Print_String
   627                           
   628                           ;Washing_Machine.c: 73:             Lcd_Print_String("OK?");
   629  0776  01F4               	clrf	Lcd_Set_Cursor@b
   630  0777  0AF4               	incf	Lcd_Set_Cursor@b,f
   631  0778  3002               	movlw	2
   632  0779  120A  118A  262B  120A  118A  	fcall	_Lcd_Set_Cursor
   633                           
   634                           ;Washing_Machine.c: 74:             break;
   635  077E  3040               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   636  077F  120A  118A  2609   	fcall	_Lcd_Print_String
   637                           
   638                           ;Washing_Machine.c: 75:     }
   639  0782  0008               	return
   640  0783                     l991:	
   641                           ;Washing_Machine.c: 76: 
   642                           
   643                           
   644                           ;Washing_Machine.c: 77: 
   645  0783  120A  118A  2593  120A  118A  	fcall	_Lcd_Clear
   646                           
   647                           ;Washing_Machine.c: 78: }
   648  0788  01F4               	clrf	Lcd_Set_Cursor@b
   649  0789  0AF4               	incf	Lcd_Set_Cursor@b,f
   650  078A  3001               	movlw	1
   651  078B  120A  118A  262B  120A  118A  	fcall	_Lcd_Set_Cursor
   652  0790  3024               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   653  0791  120A  118A  2609  120A  118A  	fcall	_Lcd_Print_String
   654  0796  01F4               	clrf	Lcd_Set_Cursor@b
   655  0797  0AF4               	incf	Lcd_Set_Cursor@b,f
   656  0798  3002               	movlw	2
   657  0799  120A  118A  262B  120A  118A  	fcall	_Lcd_Set_Cursor
   658  079E  3040               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   659  079F  120A  118A  2609   	fcall	_Lcd_Print_String
   660  07A2  0008               	return
   661  07A3                     l997:	
   662  07A3  120A  118A  2593  120A  118A  	fcall	_Lcd_Clear
   663  07A8  01F4               	clrf	Lcd_Set_Cursor@b
   664  07A9  0AF4               	incf	Lcd_Set_Cursor@b,f
   665  07AA  3001               	movlw	1
   666  07AB  120A  118A  262B  120A  118A  	fcall	_Lcd_Set_Cursor
   667  07B0  3001               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   668  07B1  120A  118A  2609  120A  118A  	fcall	_Lcd_Print_String
   669  07B6  01F4               	clrf	Lcd_Set_Cursor@b
   670  07B7  0AF4               	incf	Lcd_Set_Cursor@b,f
   671  07B8  3002               	movlw	2
   672  07B9  120A  118A  262B  120A  118A  	fcall	_Lcd_Set_Cursor
   673  07BE  3040               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   674  07BF  120A  118A  2609   	fcall	_Lcd_Print_String
   675  07C2  0008               	return
   676  07C3                     l1003:	
   677  07C3  120A  118A  2593  120A  118A  	fcall	_Lcd_Clear
   678  07C8  01F4               	clrf	Lcd_Set_Cursor@b
   679  07C9  0AF4               	incf	Lcd_Set_Cursor@b,f
   680  07CA  3001               	movlw	1
   681  07CB  120A  118A  262B  120A  118A  	fcall	_Lcd_Set_Cursor
   682  07D0  302E               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
   683  07D1  120A  118A  2609  120A  118A  	fcall	_Lcd_Print_String
   684  07D6  01F4               	clrf	Lcd_Set_Cursor@b
   685  07D7  0AF4               	incf	Lcd_Set_Cursor@b,f
   686  07D8  3002               	movlw	2
   687  07D9  120A  118A  262B  120A  118A  	fcall	_Lcd_Set_Cursor
   688  07DE  3040               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   689  07DF  120A  118A  2609   	fcall	_Lcd_Print_String
   690  07E2  0008               	return
   691  07E3                     l1011:	
   692  07E3  1283               	bcf	3,5	;RP0=0, select bank0
   693  07E4  1303               	bcf	3,6	;RP1=0, select bank0
   694  07E5  0820               	movf	Option@oC,w
   695  07E6  00FC               	movwf	??_Option
   696  07E7  01FD               	clrf	??_Option+1
   697                           
   698                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   699                           ; Switch size 1, requested type "space"
   700                           ; Number of cases is 1, Range of values is 0 to 0
   701                           ; switch strategies available:
   702                           ; Name         Instructions Cycles
   703                           ; simple_byte            4     3 (average)
   704                           ; direct_byte           11     8 (fixed)
   705                           ; jumptable            260     6 (fixed)
   706                           ;	Chosen strategy is simple_byte
   707  07E8  087D               	movf	??_Option+1,w
   708  07E9  3A00               	xorlw	0	; case 0
   709  07EA  1903               	skipnz
   710  07EB  2FED               	goto	l1049
   711  07EC  2FFB               	goto	l92
   712  07ED                     l1049:	
   713                           
   714                           ; Switch size 1, requested type "space"
   715                           ; Number of cases is 4, Range of values is 0 to 3
   716                           ; switch strategies available:
   717                           ; Name         Instructions Cycles
   718                           ; simple_byte           13     7 (average)
   719                           ; direct_byte           20     8 (fixed)
   720                           ; jumptable            260     6 (fixed)
   721                           ;	Chosen strategy is simple_byte
   722  07ED  087C               	movf	??_Option,w
   723  07EE  3A00               	xorlw	0	; case 0
   724  07EF  1903               	skipnz
   725  07F0  2F63               	goto	l985
   726  07F1  3A01               	xorlw	1	; case 1
   727  07F2  1903               	skipnz
   728  07F3  2F83               	goto	l991
   729  07F4  3A03               	xorlw	3	; case 2
   730  07F5  1903               	skipnz
   731  07F6  2FA3               	goto	l997
   732  07F7  3A01               	xorlw	1	; case 3
   733  07F8  1903               	skipnz
   734  07F9  2FC3               	goto	l1003
   735  07FA  2FFB               	goto	l92
   736  07FB                     l92:	
   737  07FB  0008               	return
   738  07FC                     __end_of_Option:	
   739                           
   740                           	psect	text3
   741  062B                     __ptext3:	
   742 ;; *************** function _Lcd_Set_Cursor *****************
   743 ;; Defined at:
   744 ;;		line 49 in file "./MyLCD.h"
   745 ;; Parameters:    Size  Location     Type
   746 ;;  a               1    wreg     unsigned char 
   747 ;;  b               1    4[COMMON] unsigned char 
   748 ;; Auto vars:     Size  Location     Type
   749 ;;  a               1    7[COMMON] unsigned char 
   750 ;;  temp            1   10[COMMON] unsigned char 
   751 ;;  y               1    9[COMMON] unsigned char 
   752 ;;  z               1    8[COMMON] unsigned char 
   753 ;; Return value:  Size  Location     Type
   754 ;;                  1    wreg      void 
   755 ;; Registers used:
   756 ;;		wreg, status,2, status,0, pclath, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   762 ;;      Params:         1       0       0       0       0
   763 ;;      Locals:         4       0       0       0       0
   764 ;;      Temps:          2       0       0       0       0
   765 ;;      Totals:         7       0       0       0       0
   766 ;;Total ram usage:        7 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; Hardware stack levels required when called:    2
   769 ;; This function calls:
   770 ;;		_Lcd_Cmd
   771 ;; This function is called by:
   772 ;;		_Setup
   773 ;;		_Option
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           
   778                           ;psect for function _Lcd_Set_Cursor
   779  062B                     _Lcd_Set_Cursor:	
   780                           
   781                           ;incstack = 0
   782                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   783                           ;Lcd_Set_Cursor@a stored from wreg
   784  062B  00F7               	movwf	Lcd_Set_Cursor@a
   785                           
   786                           ;./MyLCD.h: 49: void Lcd_Set_Cursor(char a, char b);./MyLCD.h: 50: {;./MyLCD.h: 51:  cha
      +                          r temp,z,y;;./MyLCD.h: 52:  if(a== 1)
   787  062C  0377               	decf	Lcd_Set_Cursor@a,w
   788  062D  1D03               	btfss	3,2
   789  062E  2E50               	goto	l921
   790                           
   791                           ;./MyLCD.h: 53:  {;./MyLCD.h: 54:    temp = 0x80 + b - 1;
   792  062F  0874               	movf	Lcd_Set_Cursor@b,w
   793  0630  3E7F               	addlw	127
   794  0631  00F5               	movwf	??_Lcd_Set_Cursor
   795  0632  0875               	movf	??_Lcd_Set_Cursor,w
   796  0633  00FA               	movwf	Lcd_Set_Cursor@temp
   797                           
   798                           ;./MyLCD.h: 55:   z = temp>>4;
   799  0634  087A               	movf	Lcd_Set_Cursor@temp,w
   800  0635  00F5               	movwf	??_Lcd_Set_Cursor
   801  0636  3004               	movlw	4
   802  0637                     u285:	
   803  0637  1003               	clrc
   804  0638  0CF5               	rrf	??_Lcd_Set_Cursor,f
   805  0639  3EFF               	addlw	-1
   806  063A  1D03               	skipz
   807  063B  2E37               	goto	u285
   808  063C  0875               	movf	??_Lcd_Set_Cursor,w
   809  063D  00F6               	movwf	??_Lcd_Set_Cursor+1
   810  063E  0876               	movf	??_Lcd_Set_Cursor+1,w
   811  063F  00F8               	movwf	Lcd_Set_Cursor@z
   812                           
   813                           ;./MyLCD.h: 56:   y = temp & 0x0F;
   814  0640  087A               	movf	Lcd_Set_Cursor@temp,w
   815  0641  390F               	andlw	15
   816  0642  00F5               	movwf	??_Lcd_Set_Cursor
   817  0643  0875               	movf	??_Lcd_Set_Cursor,w
   818  0644  00F9               	movwf	Lcd_Set_Cursor@y
   819                           
   820                           ;./MyLCD.h: 57:   Lcd_Cmd(z);
   821  0645  0878               	movf	Lcd_Set_Cursor@z,w
   822  0646  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
   823                           
   824                           ;./MyLCD.h: 58:   Lcd_Cmd(y);
   825  064B  0879               	movf	Lcd_Set_Cursor@y,w
   826  064C  120A  118A  25CF   	fcall	_Lcd_Cmd
   827                           
   828                           ;./MyLCD.h: 59:  }
   829  064F  0008               	return
   830  0650                     l921:	
   831                           ;./MyLCD.h: 60:  else if(a== 2)
   832                           
   833  0650  3002               	movlw	2
   834  0651  0677               	xorwf	Lcd_Set_Cursor@a,w
   835  0652  1D03               	btfss	3,2
   836  0653  0008               	return
   837                           
   838                           ;./MyLCD.h: 61:  {;./MyLCD.h: 62:   temp = 0xC0 + b - 1;
   839  0654  0874               	movf	Lcd_Set_Cursor@b,w
   840  0655  3EBF               	addlw	191
   841  0656  00F5               	movwf	??_Lcd_Set_Cursor
   842  0657  0875               	movf	??_Lcd_Set_Cursor,w
   843  0658  00FA               	movwf	Lcd_Set_Cursor@temp
   844                           
   845                           ;./MyLCD.h: 63:   z = temp>>4;
   846  0659  087A               	movf	Lcd_Set_Cursor@temp,w
   847  065A  00F5               	movwf	??_Lcd_Set_Cursor
   848  065B  3004               	movlw	4
   849  065C                     u305:	
   850  065C  1003               	clrc
   851  065D  0CF5               	rrf	??_Lcd_Set_Cursor,f
   852  065E  3EFF               	addlw	-1
   853  065F  1D03               	skipz
   854  0660  2E5C               	goto	u305
   855  0661  0875               	movf	??_Lcd_Set_Cursor,w
   856  0662  00F6               	movwf	??_Lcd_Set_Cursor+1
   857  0663  0876               	movf	??_Lcd_Set_Cursor+1,w
   858  0664  00F8               	movwf	Lcd_Set_Cursor@z
   859                           
   860                           ;./MyLCD.h: 64:   y = temp & 0x0F;
   861  0665  087A               	movf	Lcd_Set_Cursor@temp,w
   862  0666  390F               	andlw	15
   863  0667  00F5               	movwf	??_Lcd_Set_Cursor
   864  0668  0875               	movf	??_Lcd_Set_Cursor,w
   865  0669  00F9               	movwf	Lcd_Set_Cursor@y
   866                           
   867                           ;./MyLCD.h: 65:   Lcd_Cmd(z);
   868  066A  0878               	movf	Lcd_Set_Cursor@z,w
   869  066B  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
   870                           
   871                           ;./MyLCD.h: 66:   Lcd_Cmd(y);
   872  0670  0879               	movf	Lcd_Set_Cursor@y,w
   873  0671  120A  118A  25CF   	fcall	_Lcd_Cmd
   874                           
   875                           ;./MyLCD.h: 67:  }
   876  0674  0008               	return
   877  0675                     __end_of_Lcd_Set_Cursor:	
   878                           
   879                           	psect	text4
   880  0609                     __ptext4:	
   881 ;; *************** function _Lcd_Print_String *****************
   882 ;; Defined at:
   883 ;;		line 104 in file "./MyLCD.h"
   884 ;; Parameters:    Size  Location     Type
   885 ;;  a               1    wreg     PTR unsigned char 
   886 ;;		 -> STR_10(4), STR_9(10), STR_8(4), STR_7(12), 
   887 ;;		 -> STR_6(4), STR_5(10), STR_4(4), STR_3(11), 
   888 ;;		 -> STR_2(8), STR_1(12), 
   889 ;; Auto vars:     Size  Location     Type
   890 ;;  a               1   11[COMMON] PTR unsigned char 
   891 ;;		 -> STR_10(4), STR_9(10), STR_8(4), STR_7(12), 
   892 ;;		 -> STR_6(4), STR_5(10), STR_4(4), STR_3(11), 
   893 ;;		 -> STR_2(8), STR_1(12), 
   894 ;;  i               2    9[COMMON] int 
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      void 
   897 ;; Registers used:
   898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   904 ;;      Params:         0       0       0       0       0
   905 ;;      Locals:         3       0       0       0       0
   906 ;;      Temps:          0       0       0       0       0
   907 ;;      Totals:         3       0       0       0       0
   908 ;;Total ram usage:        3 bytes
   909 ;; Hardware stack levels used:    1
   910 ;; Hardware stack levels required when called:    2
   911 ;; This function calls:
   912 ;;		_Lcd_Print_Char
   913 ;; This function is called by:
   914 ;;		_Setup
   915 ;;		_Option
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919                           
   920                           ;psect for function _Lcd_Print_String
   921  0609                     _Lcd_Print_String:	
   922                           
   923                           ;incstack = 0
   924                           ; Regs used in _Lcd_Print_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   925                           ;Lcd_Print_String@a stored from wreg
   926  0609  00FB               	movwf	Lcd_Print_String@a
   927                           
   928                           ;./MyLCD.h: 104: void Lcd_Print_String(char *a);./MyLCD.h: 105: {;./MyLCD.h: 106:  int i
      +                          ;;./MyLCD.h: 107:  for(i=0;a[i]!='\0';i++)
   929  060A  01F9               	clrf	Lcd_Print_String@i
   930  060B  01FA               	clrf	Lcd_Print_String@i+1
   931  060C                     l937:	
   932  060C  0879               	movf	Lcd_Print_String@i,w
   933  060D  077B               	addwf	Lcd_Print_String@a,w
   934  060E  0084               	movwf	4
   935  060F  120A  118A  2003  120A  118A  	fcall	stringdir
   936  0614  3A00               	xorlw	0
   937  0615  1903               	btfsc	3,2
   938  0616  0008               	return
   939                           
   940                           ;./MyLCD.h: 108:     Lcd_Print_Char(a[i]);
   941  0617  0879               	movf	Lcd_Print_String@i,w
   942  0618  077B               	addwf	Lcd_Print_String@a,w
   943  0619  0084               	movwf	4
   944  061A  120A  118A  2003  120A  118A  	fcall	stringdir
   945  061F  120A  118A  2675  120A  118A  	fcall	_Lcd_Print_Char
   946  0624  3001               	movlw	1
   947  0625  07F9               	addwf	Lcd_Print_String@i,f
   948  0626  1803               	skipnc
   949  0627  0AFA               	incf	Lcd_Print_String@i+1,f
   950  0628  3000               	movlw	0
   951  0629  07FA               	addwf	Lcd_Print_String@i+1,f
   952  062A  2E0C               	goto	l937
   953  062B                     __end_of_Lcd_Print_String:	
   954                           
   955                           	psect	text5
   956  0675                     __ptext5:	
   957 ;; *************** function _Lcd_Print_Char *****************
   958 ;; Defined at:
   959 ;;		line 88 in file "./MyLCD.h"
   960 ;; Parameters:    Size  Location     Type
   961 ;;  data            1    wreg     unsigned char 
   962 ;; Auto vars:     Size  Location     Type
   963 ;;  data            1    4[COMMON] unsigned char 
   964 ;;  i               2    7[COMMON] int 
   965 ;;  i               2    5[COMMON] int 
   966 ;;  Upper_Nibble    1    3[COMMON] unsigned char 
   967 ;;  Lower_Nibble    1    2[COMMON] unsigned char 
   968 ;; Return value:  Size  Location     Type
   969 ;;                  1    wreg      void 
   970 ;; Registers used:
   971 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   972 ;; Tracked objects:
   973 ;;		On entry : 0/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   977 ;;      Params:         0       0       0       0       0
   978 ;;      Locals:         7       0       0       0       0
   979 ;;      Temps:          1       0       0       0       0
   980 ;;      Totals:         8       0       0       0       0
   981 ;;Total ram usage:        8 bytes
   982 ;; Hardware stack levels used:    1
   983 ;; Hardware stack levels required when called:    1
   984 ;; This function calls:
   985 ;;		_Lcd_SetBit
   986 ;; This function is called by:
   987 ;;		_Lcd_Print_String
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           
   992                           ;psect for function _Lcd_Print_Char
   993  0675                     _Lcd_Print_Char:	
   994                           
   995                           ;incstack = 0
   996                           ; Regs used in _Lcd_Print_Char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   997                           ;Lcd_Print_Char@data stored from wreg
   998  0675  00F4               	movwf	Lcd_Print_Char@data
   999                           
  1000                           ;./MyLCD.h: 88: void Lcd_Print_Char(char data);./MyLCD.h: 89: {;./MyLCD.h: 90:    char L
      +                          ower_Nibble,Upper_Nibble;;./MyLCD.h: 91:    Lower_Nibble = data&0x0F;
  1001  0676  0874               	movf	Lcd_Print_Char@data,w
  1002  0677  390F               	andlw	15
  1003  0678  00F1               	movwf	??_Lcd_Print_Char
  1004  0679  0871               	movf	??_Lcd_Print_Char,w
  1005  067A  00F2               	movwf	Lcd_Print_Char@Lower_Nibble
  1006                           
  1007                           ;./MyLCD.h: 92:    Upper_Nibble = data&0xF0;
  1008  067B  0874               	movf	Lcd_Print_Char@data,w
  1009  067C  39F0               	andlw	240
  1010  067D  00F1               	movwf	??_Lcd_Print_Char
  1011  067E  0871               	movf	??_Lcd_Print_Char,w
  1012  067F  00F3               	movwf	Lcd_Print_Char@Upper_Nibble
  1013                           
  1014                           ;./MyLCD.h: 93:    RD2 = 1;
  1015  0680  1283               	bcf	3,5	;RP0=0, select bank0
  1016  0681  1303               	bcf	3,6	;RP1=0, select bank0
  1017  0682  1508               	bsf	8,2	;volatile
  1018                           
  1019                           ;./MyLCD.h: 94:    Lcd_SetBit(Upper_Nibble>>4);
  1020  0683  0873               	movf	Lcd_Print_Char@Upper_Nibble,w
  1021  0684  00F1               	movwf	??_Lcd_Print_Char
  1022  0685  3004               	movlw	4
  1023  0686                     u225:	
  1024  0686  1003               	clrc
  1025  0687  0CF1               	rrf	??_Lcd_Print_Char,f
  1026  0688  3EFF               	addlw	-1
  1027  0689  1D03               	skipz
  1028  068A  2E86               	goto	u225
  1029  068B  0871               	movf	??_Lcd_Print_Char,w
  1030  068C  120A  118A  25B5  120A  118A  	fcall	_Lcd_SetBit
  1031                           
  1032                           ;./MyLCD.h: 95:    RD3 = 1;
  1033  0691  1283               	bcf	3,5	;RP0=0, select bank0
  1034  0692  1303               	bcf	3,6	;RP1=0, select bank0
  1035  0693  1588               	bsf	8,3	;volatile
  1036                           
  1037                           ;./MyLCD.h: 96:    for(int i=2130483; i<=0; i--) __nop();
  1038  0694  3033               	movlw	51
  1039  0695  00F5               	movwf	Lcd_Print_Char@i
  1040  0696  3082               	movlw	130
  1041  0697  00F6               	movwf	Lcd_Print_Char@i+1
  1042  0698  0876               	movf	Lcd_Print_Char@i+1,w
  1043  0699  3A80               	xorlw	128
  1044  069A  00FF               	movwf	127
  1045  069B  3080               	movlw	128
  1046  069C  027F               	subwf	127,w
  1047  069D  1D03               	skipz
  1048  069E  2EA1               	goto	u235
  1049  069F  3001               	movlw	1
  1050  06A0  0275               	subwf	Lcd_Print_Char@i,w
  1051  06A1                     u235:	
  1052  06A1  1803               	btfsc	3,0
  1053  06A2  2EB5               	goto	l60
  1054  06A3                     l59:	
  1055  06A3  0000               	nop
  1056  06A4  30FF               	movlw	255
  1057  06A5  07F5               	addwf	Lcd_Print_Char@i,f
  1058  06A6  1803               	skipnc
  1059  06A7  0AF6               	incf	Lcd_Print_Char@i+1,f
  1060  06A8  30FF               	movlw	255
  1061  06A9  07F6               	addwf	Lcd_Print_Char@i+1,f
  1062  06AA  0876               	movf	Lcd_Print_Char@i+1,w
  1063  06AB  3A80               	xorlw	128
  1064  06AC  00FF               	movwf	127
  1065  06AD  3080               	movlw	128
  1066  06AE  027F               	subwf	127,w
  1067  06AF  1D03               	skipz
  1068  06B0  2EB3               	goto	u245
  1069  06B1  3001               	movlw	1
  1070  06B2  0275               	subwf	Lcd_Print_Char@i,w
  1071  06B3                     u245:	
  1072  06B3  1C03               	skipc
  1073  06B4  2EA3               	goto	l59
  1074  06B5                     l60:	
  1075                           
  1076                           ;./MyLCD.h: 97:    RD3 = 0;
  1077  06B5  1283               	bcf	3,5	;RP0=0, select bank0
  1078  06B6  1303               	bcf	3,6	;RP1=0, select bank0
  1079  06B7  1188               	bcf	8,3	;volatile
  1080                           
  1081                           ;./MyLCD.h: 98:    Lcd_SetBit(Lower_Nibble);
  1082  06B8  0872               	movf	Lcd_Print_Char@Lower_Nibble,w
  1083  06B9  120A  118A  25B5  120A  118A  	fcall	_Lcd_SetBit
  1084                           
  1085                           ;./MyLCD.h: 99:    RD3 = 1;
  1086  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  1087  06BF  1303               	bcf	3,6	;RP1=0, select bank0
  1088  06C0  1588               	bsf	8,3	;volatile
  1089                           
  1090                           ;./MyLCD.h: 100:    for(int i=2130483; i<=0; i--) __nop();
  1091  06C1  3033               	movlw	51
  1092  06C2  00F7               	movwf	Lcd_Print_Char@i_80
  1093  06C3  3082               	movlw	130
  1094  06C4  00F8               	movwf	Lcd_Print_Char@i_80+1
  1095  06C5  0878               	movf	Lcd_Print_Char@i_80+1,w
  1096  06C6  3A80               	xorlw	128
  1097  06C7  00FF               	movwf	127
  1098  06C8  3080               	movlw	128
  1099  06C9  027F               	subwf	127,w
  1100  06CA  1D03               	skipz
  1101  06CB  2ECE               	goto	u255
  1102  06CC  3001               	movlw	1
  1103  06CD  0277               	subwf	Lcd_Print_Char@i_80,w
  1104  06CE                     u255:	
  1105  06CE  1803               	btfsc	3,0
  1106  06CF  2EE2               	goto	l62
  1107  06D0                     l61:	
  1108  06D0  0000               	nop
  1109  06D1  30FF               	movlw	255
  1110  06D2  07F7               	addwf	Lcd_Print_Char@i_80,f
  1111  06D3  1803               	skipnc
  1112  06D4  0AF8               	incf	Lcd_Print_Char@i_80+1,f
  1113  06D5  30FF               	movlw	255
  1114  06D6  07F8               	addwf	Lcd_Print_Char@i_80+1,f
  1115  06D7  0878               	movf	Lcd_Print_Char@i_80+1,w
  1116  06D8  3A80               	xorlw	128
  1117  06D9  00FF               	movwf	127
  1118  06DA  3080               	movlw	128
  1119  06DB  027F               	subwf	127,w
  1120  06DC  1D03               	skipz
  1121  06DD  2EE0               	goto	u265
  1122  06DE  3001               	movlw	1
  1123  06DF  0277               	subwf	Lcd_Print_Char@i_80,w
  1124  06E0                     u265:	
  1125  06E0  1C03               	skipc
  1126  06E1  2ED0               	goto	l61
  1127  06E2                     l62:	
  1128                           
  1129                           ;./MyLCD.h: 101:    RD3 = 0;
  1130  06E2  1283               	bcf	3,5	;RP0=0, select bank0
  1131  06E3  1303               	bcf	3,6	;RP1=0, select bank0
  1132  06E4  1188               	bcf	8,3	;volatile
  1133  06E5  0008               	return
  1134  06E6                     __end_of_Lcd_Print_Char:	
  1135                           
  1136                           	psect	text6
  1137  0593                     __ptext6:	
  1138 ;; *************** function _Lcd_Clear *****************
  1139 ;; Defined at:
  1140 ;;		line 43 in file "./MyLCD.h"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;		None
  1145 ;; Return value:  Size  Location     Type
  1146 ;;                  2   44[None  ] int 
  1147 ;; Registers used:
  1148 ;;		wreg, status,2, status,0, pclath, cstack
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1154 ;;      Params:         0       0       0       0       0
  1155 ;;      Locals:         0       0       0       0       0
  1156 ;;      Temps:          0       0       0       0       0
  1157 ;;      Totals:         0       0       0       0       0
  1158 ;;Total ram usage:        0 bytes
  1159 ;; Hardware stack levels used:    1
  1160 ;; Hardware stack levels required when called:    2
  1161 ;; This function calls:
  1162 ;;		_Lcd_Cmd
  1163 ;; This function is called by:
  1164 ;;		_Setup
  1165 ;;		_Option
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           
  1170                           ;psect for function _Lcd_Clear
  1171  0593                     _Lcd_Clear:	
  1172                           
  1173                           ;./MyLCD.h: 45:  Lcd_Cmd(0);
  1174                           
  1175                           ;incstack = 0
  1176                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1177  0593  3000               	movlw	0
  1178  0594  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  1179                           
  1180                           ;./MyLCD.h: 46:  Lcd_Cmd(1);
  1181  0599  3001               	movlw	1
  1182  059A  120A  118A  25CF   	fcall	_Lcd_Cmd
  1183  059D  0008               	return
  1184  059E                     __end_of_Lcd_Clear:	
  1185                           
  1186                           	psect	text7
  1187  06E6                     __ptext7:	
  1188 ;; *************** function _Lcd_Start *****************
  1189 ;; Defined at:
  1190 ;;		line 70 in file "./MyLCD.h"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;		None
  1193 ;; Auto vars:     Size  Location     Type
  1194 ;;  i               2    6[COMMON] int 
  1195 ;; Return value:  Size  Location     Type
  1196 ;;                  1    wreg      void 
  1197 ;; Registers used:
  1198 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1199 ;; Tracked objects:
  1200 ;;		On entry : 0/0
  1201 ;;		On exit  : 0/0
  1202 ;;		Unchanged: 0/0
  1203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1204 ;;      Params:         0       0       0       0       0
  1205 ;;      Locals:         2       0       0       0       0
  1206 ;;      Temps:          2       0       0       0       0
  1207 ;;      Totals:         4       0       0       0       0
  1208 ;;Total ram usage:        4 bytes
  1209 ;; Hardware stack levels used:    1
  1210 ;; Hardware stack levels required when called:    2
  1211 ;; This function calls:
  1212 ;;		_Lcd_Cmd
  1213 ;;		_Lcd_SetBit
  1214 ;; This function is called by:
  1215 ;;		_main
  1216 ;; This function uses a non-reentrant model
  1217 ;;
  1218                           
  1219                           
  1220                           ;psect for function _Lcd_Start
  1221  06E6                     _Lcd_Start:	
  1222                           
  1223                           ;./MyLCD.h: 72:   Lcd_SetBit(0x00);
  1224                           
  1225                           ;incstack = 0
  1226                           ; Regs used in _Lcd_Start: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1227  06E6  3000               	movlw	0
  1228  06E7  120A  118A  25B5  120A  118A  	fcall	_Lcd_SetBit
  1229                           
  1230                           ;./MyLCD.h: 73:   for(int i=1065244; i<=0; i--) __nop();
  1231  06EC  301C               	movlw	28
  1232  06ED  00F6               	movwf	Lcd_Start@i
  1233  06EE  3041               	movlw	65
  1234  06EF  00F7               	movwf	Lcd_Start@i+1
  1235  06F0  0877               	movf	Lcd_Start@i+1,w
  1236  06F1  3A80               	xorlw	128
  1237  06F2  00FF               	movwf	127
  1238  06F3  3080               	movlw	128
  1239  06F4  027F               	subwf	127,w
  1240  06F5  1D03               	skipz
  1241  06F6  2EF9               	goto	u325
  1242  06F7  3001               	movlw	1
  1243  06F8  0276               	subwf	Lcd_Start@i,w
  1244  06F9                     u325:	
  1245  06F9  1803               	btfsc	3,0
  1246  06FA  2F0D               	goto	l951
  1247  06FB                     l54:	
  1248  06FB  0000               	nop
  1249  06FC  30FF               	movlw	255
  1250  06FD  07F6               	addwf	Lcd_Start@i,f
  1251  06FE  1803               	skipnc
  1252  06FF  0AF7               	incf	Lcd_Start@i+1,f
  1253  0700  30FF               	movlw	255
  1254  0701  07F7               	addwf	Lcd_Start@i+1,f
  1255  0702  0877               	movf	Lcd_Start@i+1,w
  1256  0703  3A80               	xorlw	128
  1257  0704  00FF               	movwf	127
  1258  0705  3080               	movlw	128
  1259  0706  027F               	subwf	127,w
  1260  0707  1D03               	skipz
  1261  0708  2F0B               	goto	u335
  1262  0709  3001               	movlw	1
  1263  070A  0276               	subwf	Lcd_Start@i,w
  1264  070B                     u335:	
  1265  070B  1C03               	skipc
  1266  070C  2EFB               	goto	l54
  1267  070D                     l951:	
  1268                           
  1269                           ;./MyLCD.h: 74:   Lcd_Cmd(0x03);
  1270  070D  3003               	movlw	3
  1271  070E  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  1272                           
  1273                           ;./MyLCD.h: 75:  _delay((unsigned long)((5)*(20000000/4000.0)));
  1274  0713  3021               	movlw	33
  1275  0714  00F5               	movwf	??_Lcd_Start+1
  1276  0715  3076               	movlw	118
  1277  0716  00F4               	movwf	??_Lcd_Start
  1278  0717                     u357:	
  1279  0717  0BF4               	decfsz	??_Lcd_Start,f
  1280  0718  2F17               	goto	u357
  1281  0719  0BF5               	decfsz	??_Lcd_Start+1,f
  1282  071A  2F17               	goto	u357
  1283  071B  0000               	nop
  1284                           
  1285                           ;./MyLCD.h: 76:   Lcd_Cmd(0x03);
  1286  071C  3003               	movlw	3
  1287  071D  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  1288                           
  1289                           ;./MyLCD.h: 77:  _delay((unsigned long)((11)*(20000000/4000.0)));
  1290  0722  3048               	movlw	72
  1291  0723  00F5               	movwf	??_Lcd_Start+1
  1292  0724  306C               	movlw	108
  1293  0725  00F4               	movwf	??_Lcd_Start
  1294  0726                     u367:	
  1295  0726  0BF4               	decfsz	??_Lcd_Start,f
  1296  0727  2F26               	goto	u367
  1297  0728  0BF5               	decfsz	??_Lcd_Start+1,f
  1298  0729  2F26               	goto	u367
  1299  072A  0000               	nop
  1300                           
  1301                           ;./MyLCD.h: 78:   Lcd_Cmd(0x03);
  1302  072B  3003               	movlw	3
  1303  072C  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  1304                           
  1305                           ;./MyLCD.h: 79:   Lcd_Cmd(0x02);
  1306  0731  3002               	movlw	2
  1307  0732  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  1308                           
  1309                           ;./MyLCD.h: 80:   Lcd_Cmd(0x02);
  1310  0737  3002               	movlw	2
  1311  0738  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  1312                           
  1313                           ;./MyLCD.h: 81:   Lcd_Cmd(0x08);
  1314  073D  3008               	movlw	8
  1315  073E  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  1316                           
  1317                           ;./MyLCD.h: 82:   Lcd_Cmd(0x00);
  1318  0743  3000               	movlw	0
  1319  0744  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  1320                           
  1321                           ;./MyLCD.h: 83:   Lcd_Cmd(0x0C);
  1322  0749  300C               	movlw	12
  1323  074A  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  1324                           
  1325                           ;./MyLCD.h: 84:   Lcd_Cmd(0x00);
  1326  074F  3000               	movlw	0
  1327  0750  120A  118A  25CF  120A  118A  	fcall	_Lcd_Cmd
  1328                           
  1329                           ;./MyLCD.h: 85:   Lcd_Cmd(0x06);
  1330  0755  3006               	movlw	6
  1331  0756  120A  118A  25CF   	fcall	_Lcd_Cmd
  1332  0759  0008               	return
  1333  075A                     __end_of_Lcd_Start:	
  1334                           
  1335                           	psect	text8
  1336  05CF                     __ptext8:	
  1337 ;; *************** function _Lcd_Cmd *****************
  1338 ;; Defined at:
  1339 ;;		line 34 in file "./MyLCD.h"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;  a               1    wreg     unsigned char 
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;  a               1    3[COMMON] unsigned char 
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  1    wreg      void 
  1346 ;; Registers used:
  1347 ;;		wreg, status,2, status,0, pclath, cstack
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1353 ;;      Params:         0       0       0       0       0
  1354 ;;      Locals:         1       0       0       0       0
  1355 ;;      Temps:          2       0       0       0       0
  1356 ;;      Totals:         3       0       0       0       0
  1357 ;;Total ram usage:        3 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; Hardware stack levels required when called:    1
  1360 ;; This function calls:
  1361 ;;		_Lcd_SetBit
  1362 ;; This function is called by:
  1363 ;;		_Lcd_Clear
  1364 ;;		_Lcd_Set_Cursor
  1365 ;;		_Lcd_Start
  1366 ;; This function uses a non-reentrant model
  1367 ;;
  1368                           
  1369                           
  1370                           ;psect for function _Lcd_Cmd
  1371  05CF                     _Lcd_Cmd:	
  1372                           
  1373                           ;incstack = 0
  1374                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1375                           ;Lcd_Cmd@a stored from wreg
  1376  05CF  00F3               	movwf	Lcd_Cmd@a
  1377                           
  1378                           ;./MyLCD.h: 34: void Lcd_Cmd(char a);./MyLCD.h: 35: {;./MyLCD.h: 36:  RD2 = 0;
  1379  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  1380  05D1  1303               	bcf	3,6	;RP1=0, select bank0
  1381  05D2  1108               	bcf	8,2	;volatile
  1382                           
  1383                           ;./MyLCD.h: 37:  Lcd_SetBit(a);
  1384  05D3  0873               	movf	Lcd_Cmd@a,w
  1385  05D4  120A  118A  25B5  120A  118A  	fcall	_Lcd_SetBit
  1386                           
  1387                           ;./MyLCD.h: 38:  RD3 = 1;
  1388  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  1389  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  1390  05DB  1588               	bsf	8,3	;volatile
  1391                           
  1392                           ;./MyLCD.h: 39:         _delay((unsigned long)((4)*(20000000/4000.0)));
  1393  05DC  301A               	movlw	26
  1394  05DD  00F2               	movwf	??_Lcd_Cmd+1
  1395  05DE  30F8               	movlw	248
  1396  05DF  00F1               	movwf	??_Lcd_Cmd
  1397  05E0                     u377:	
  1398  05E0  0BF1               	decfsz	??_Lcd_Cmd,f
  1399  05E1  2DE0               	goto	u377
  1400  05E2  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1401  05E3  2DE0               	goto	u377
  1402  05E4  0000               	nop
  1403                           
  1404                           ;./MyLCD.h: 40:         RD3 = 0;
  1405  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  1406  05E6  1303               	bcf	3,6	;RP1=0, select bank0
  1407  05E7  1188               	bcf	8,3	;volatile
  1408  05E8  0008               	return
  1409  05E9                     __end_of_Lcd_Cmd:	
  1410                           
  1411                           	psect	text9
  1412  05B5                     __ptext9:	
  1413 ;; *************** function _Lcd_SetBit *****************
  1414 ;; Defined at:
  1415 ;;		line 11 in file "./MyLCD.h"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;  data_bit        1    wreg     unsigned char 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  data_bit        1    0[COMMON] unsigned char 
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  1    wreg      void 
  1422 ;; Registers used:
  1423 ;;		wreg
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1429 ;;      Params:         0       0       0       0       0
  1430 ;;      Locals:         1       0       0       0       0
  1431 ;;      Temps:          0       0       0       0       0
  1432 ;;      Totals:         1       0       0       0       0
  1433 ;;Total ram usage:        1 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; This function calls:
  1436 ;;		Nothing
  1437 ;; This function is called by:
  1438 ;;		_Lcd_Cmd
  1439 ;;		_Lcd_Start
  1440 ;;		_Lcd_Print_Char
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           
  1445                           ;psect for function _Lcd_SetBit
  1446  05B5                     _Lcd_SetBit:	
  1447                           
  1448                           ;incstack = 0
  1449                           ; Regs used in _Lcd_SetBit: [wreg]
  1450                           ;Lcd_SetBit@data_bit stored from wreg
  1451  05B5  00F0               	movwf	Lcd_SetBit@data_bit
  1452                           
  1453                           ;./MyLCD.h: 11: void Lcd_SetBit(char data_bit);./MyLCD.h: 12: {;./MyLCD.h: 13:  if(data_
      +                          bit& 1)
  1454  05B6  1C70               	btfss	Lcd_SetBit@data_bit,0
  1455  05B7  2DBC               	goto	l31
  1456                           
  1457                           ;./MyLCD.h: 14:   RD4 = 1;
  1458  05B8  1283               	bcf	3,5	;RP0=0, select bank0
  1459  05B9  1303               	bcf	3,6	;RP1=0, select bank0
  1460  05BA  1608               	bsf	8,4	;volatile
  1461  05BB  2DBF               	goto	l32
  1462  05BC                     l31:	
  1463                           ;./MyLCD.h: 15:  else
  1464                           
  1465                           
  1466                           ;./MyLCD.h: 16:   RD4 = 0;
  1467  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  1468  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  1469  05BE  1208               	bcf	8,4	;volatile
  1470  05BF                     l32:	
  1471                           
  1472                           ;./MyLCD.h: 18:  if(data_bit& 2)
  1473  05BF  1CF0               	btfss	Lcd_SetBit@data_bit,1
  1474  05C0  2DC3               	goto	l33
  1475                           
  1476                           ;./MyLCD.h: 19:   RD5 = 1;
  1477  05C1  1688               	bsf	8,5	;volatile
  1478  05C2  2DC4               	goto	l34
  1479  05C3                     l33:	
  1480                           ;./MyLCD.h: 20:  else
  1481                           
  1482                           
  1483                           ;./MyLCD.h: 21:   RD5 = 0;
  1484  05C3  1288               	bcf	8,5	;volatile
  1485  05C4                     l34:	
  1486                           
  1487                           ;./MyLCD.h: 23:  if(data_bit& 4)
  1488  05C4  1D70               	btfss	Lcd_SetBit@data_bit,2
  1489  05C5  2DC8               	goto	l35
  1490                           
  1491                           ;./MyLCD.h: 24:   RD6 = 1;
  1492  05C6  1708               	bsf	8,6	;volatile
  1493  05C7  2DC9               	goto	l36
  1494  05C8                     l35:	
  1495                           ;./MyLCD.h: 25:  else
  1496                           
  1497                           
  1498                           ;./MyLCD.h: 26:   RD6 = 0;
  1499  05C8  1308               	bcf	8,6	;volatile
  1500  05C9                     l36:	
  1501                           
  1502                           ;./MyLCD.h: 28:  if(data_bit& 8)
  1503  05C9  1DF0               	btfss	Lcd_SetBit@data_bit,3
  1504  05CA  2DCD               	goto	l37
  1505                           
  1506                           ;./MyLCD.h: 29:   RD7 = 1;
  1507  05CB  1788               	bsf	8,7	;volatile
  1508  05CC  0008               	return
  1509  05CD                     l37:	
  1510                           ;./MyLCD.h: 30:  else
  1511                           
  1512                           
  1513                           ;./MyLCD.h: 31:   RD7 = 0;
  1514  05CD  1388               	bcf	8,7	;volatile
  1515  05CE  0008               	return
  1516  05CF                     __end_of_Lcd_SetBit:	
  1517  007E                     btemp	set	126	;btemp
  1518  007E                     wtemp0	set	126


Data Sizes:
    Strings     67
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      1       1
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Print_String@a	PTR unsigned char  size(1) Largest target is 12
		 -> STR_10(CODE[4]), STR_9(CODE[10]), STR_8(CODE[4]), STR_7(CODE[12]), 
		 -> STR_6(CODE[4]), STR_5(CODE[10]), STR_4(CODE[4]), STR_3(CODE[11]), 
		 -> STR_2(CODE[8]), STR_1(CODE[12]), 


Critical Paths under _main in COMMON

    _main->_Option
    _Setup->_Lcd_Print_String
    _Option->_Lcd_Print_String
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Print_String->_Lcd_Print_Char
    _Lcd_Print_Char->_Lcd_SetBit
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Start->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_SetBit

Critical Paths under _main in BANK0

    _main->_Option

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    4169
                          _Lcd_Start
                             _Option
                              _Setup
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    1940
                          _Lcd_Clear
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (1) _Option                                               3     3      0    1985
                                             12 COMMON     2     2      0
                                              0 BANK0      1     1      0
                          _Lcd_Clear
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1    1140
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Print_String                                     3     3      0     690
                                              9 COMMON     3     3      0
                     _Lcd_Print_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Print_Char                                       8     8      0     270
                                              1 COMMON     8     8      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Start                                            4     4      0     244
                                              4 COMMON     4     4      0
                            _Lcd_Cmd
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (4) _Lcd_SetBit                                           1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Start
     _Lcd_Cmd
       _Lcd_SetBit
     _Lcd_SetBit
   _Option
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_SetBit
     _Lcd_Print_String
       _Lcd_Print_Char
         _Lcd_SetBit
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_SetBit
   _Setup
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_SetBit
     _Lcd_Print_String
       _Lcd_Print_Char
         _Lcd_SetBit
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_SetBit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      1       1       5        1.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sun Oct 07 07:51:39 2018

                         pc 0002                 __CFG_CP$OFF 0000                          l31 05BC  
                        l32 05BF                          l33 05C3                          l34 05C4  
                        l35 05C8                          l36 05C9                          l60 06B5  
                        l37 05CD                          l61 06D0                          l54 06FB  
                        l62 06E2                          l74 05B4                          l59 06A3  
                        l92 07FB                          fsr 0004                         l921 0650  
                       l951 070D                         l937 060C                         l991 0783  
                       l985 0763                         l997 07A3                         _RD2 0042  
                       _RD3 0043                         _RD4 0044                         _RD5 0045  
                       _RD6 0046                         _RD7 0047                         u225 0686  
                       u305 065C                         u235 06A1                         u325 06F9  
                       u245 06B3                         u335 070B                         u255 06CE  
                       u265 06E0                __CFG_CPD$OFF 0000                         u357 0717  
                       u285 0637                         u367 0726                         u377 05E0  
                       fsr0 0004                __CFG_FOSC$HS 0000                __CFG_LVP$OFF 0000  
                      l1003 07C3                        l1011 07E3                        l1049 07ED  
                      STR_1 0015                        STR_2 0040                        STR_3 0021  
                      STR_4 0048                        STR_5 002C                        STR_6 0048  
                      STR_7 0009                        STR_8 0048                        STR_9 0036  
              __CFG_WRT$OFF 0000                        _main 059E                        btemp 007E  
             __CFG_BOREN$ON 0000                        start 0000          Lcd_Print_Char@i_80 0077  
        Lcd_Print_Char@data 0074             __end_of_Lcd_Cmd 05E9                  _Lcd_SetBit 05B5  
                     ?_main 0070                       STR_10 0048               __CFG_WDTE$OFF 0000  
   __size_of_Lcd_Set_Cursor 004A                       _TRISD 0088                       _TRISE 0089  
             __CFG_PWRTE$ON 0000                       _Setup 05E9                       pclath 000A  
 __size_of_Lcd_Print_String 0022                       status 0003                       wtemp0 007E  
   __size_of_Lcd_Print_Char 0071             __initialization 07FC                __end_of_main 05B5  
                    ??_main 007E          __size_of_Lcd_Clear 000B          __size_of_Lcd_Start 0074  
                    ?_Setup 0070                      _ADCON1 009F                   ??_Lcd_Cmd 0071  
                    _Option 075A                 ?_Lcd_SetBit 0070             Lcd_Set_Cursor@a 0077  
           Lcd_Set_Cursor@b 0074             Lcd_Set_Cursor@y 0079             Lcd_Set_Cursor@z 0078  
   __end_of__initialization 07FC           __end_of_Lcd_Clear 059E           __end_of_Lcd_Start 075A  
            __pcstackCOMMON 0070               __end_of_Setup 0609              _Lcd_Set_Cursor 062B  
                   ??_Setup 007C            _Lcd_Print_String 0609         __size_of_Lcd_SetBit 001A  
            _Lcd_Print_Char 0675                  __pmaintext 059E                     ?_Option 0070  
        Lcd_SetBit@data_bit 0070      __end_of_Lcd_Set_Cursor 0675                  __stringtab 0003  
           Lcd_Print_Char@i 0075                     _Lcd_Cmd 05CF      __end_of_Lcd_Print_Char 06E6  
           __size_of_Option 00A2             ?_Lcd_Set_Cursor 0074                     __ptext1 05E9  
                   __ptext2 075A                     __ptext3 062B                     __ptext4 0609  
                   __ptext5 0675                     __ptext6 0593                     __ptext7 06E6  
                   __ptext8 05CF                     __ptext9 05B5        end_of_initialization 07FC  
           ?_Lcd_Print_Char 0070                ??_Lcd_SetBit 0070                   _PORTEbits 0009  
        __end_of_Lcd_SetBit 05CF                   _Lcd_Clear 0593              __end_of_Option 07FC  
                 _Lcd_Start 06E6    __end_of_Lcd_Print_String 062B         start_initialization 07FC  
         Lcd_Print_String@a 007B           Lcd_Print_String@i 0079                    ??_Option 007C  
                ?_Lcd_Clear 0070                  ?_Lcd_Start 0070  Lcd_Print_Char@Lower_Nibble 0072  
                 ___latbits 0002               __pcstackBANK0 0020                    ?_Lcd_Cmd 0070  
          ??_Lcd_Set_Cursor 0075                   __pstrings 0003              __size_of_Setup 0020  
          ??_Lcd_Print_Char 0071                    Lcd_Cmd@a 0073                 ??_Lcd_Clear 0074  
               ??_Lcd_Start 0074                 __stringbase 0008            __size_of_Lcd_Cmd 001A  
                  Option@oC 0020          __end_of__stringtab 0009           ?_Lcd_Print_String 0070  
        ??_Lcd_Print_String 0079               __size_of_main 0017  Lcd_Print_Char@Upper_Nibble 0073  
                 stringcode 0003          Lcd_Set_Cursor@temp 007A                  Lcd_Start@i 0076  
                  stringdir 0003                    stringtab 0003  
